/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as publicIndexImport } from './routes/__public/index'
import { Route as dashboardVolumesIndexImport } from './routes/__dashboard/volumes/index'
import { Route as dashboardDatabasesIndexImport } from './routes/__dashboard/databases/index'
import { Route as dashboardDatabasesNewIndexImport } from './routes/__dashboard/databases/new/index'
import { Route as dashboardDatabasesDatabaseIndexImport } from './routes/__dashboard/databases/$database/index'
import { Route as dashboardDatabasesDatabaseEditIndexImport } from './routes/__dashboard/databases/$database/edit/index'

// Create Virtual Routes

const dashboardRouteLazyImport = createFileRoute('/__dashboard')()
const dashboardSettingsIndexLazyImport = createFileRoute(
  '/__dashboard/settings/',
)()
const dashboardVolumesNewIndexLazyImport = createFileRoute(
  '/__dashboard/volumes/new/',
)()
const dashboardVolumesVolumeIndexLazyImport = createFileRoute(
  '/__dashboard/volumes/$volume/',
)()

// Create/Update Routes

const dashboardRouteLazyRoute = dashboardRouteLazyImport
  .update({
    id: '/__dashboard',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/__dashboard/route.lazy').then((d) => d.Route))

const publicIndexRoute = publicIndexImport.update({
  id: '/__public/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const dashboardSettingsIndexLazyRoute = dashboardSettingsIndexLazyImport
  .update({
    id: '/settings/',
    path: '/settings/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/settings/index.lazy').then((d) => d.Route),
  )

const dashboardVolumesIndexRoute = dashboardVolumesIndexImport
  .update({
    id: '/volumes/',
    path: '/volumes/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/volumes/index.lazy').then((d) => d.Route),
  )

const dashboardDatabasesIndexRoute = dashboardDatabasesIndexImport
  .update({
    id: '/databases/',
    path: '/databases/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/databases/index.lazy').then((d) => d.Route),
  )

const dashboardVolumesNewIndexLazyRoute = dashboardVolumesNewIndexLazyImport
  .update({
    id: '/volumes/new/',
    path: '/volumes/new/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/volumes/new/index.lazy').then((d) => d.Route),
  )

const dashboardVolumesVolumeIndexLazyRoute =
  dashboardVolumesVolumeIndexLazyImport
    .update({
      id: '/volumes/$volume/',
      path: '/volumes/$volume/',
      getParentRoute: () => dashboardRouteLazyRoute,
    } as any)
    .lazy(() =>
      import('./routes/__dashboard/volumes/$volume/index.lazy').then(
        (d) => d.Route,
      ),
    )

const dashboardDatabasesNewIndexRoute = dashboardDatabasesNewIndexImport
  .update({
    id: '/databases/new/',
    path: '/databases/new/',
    getParentRoute: () => dashboardRouteLazyRoute,
  } as any)
  .lazy(() =>
    import('./routes/__dashboard/databases/new/index.lazy').then(
      (d) => d.Route,
    ),
  )

const dashboardDatabasesDatabaseIndexRoute =
  dashboardDatabasesDatabaseIndexImport
    .update({
      id: '/databases/$database/',
      path: '/databases/$database/',
      getParentRoute: () => dashboardRouteLazyRoute,
    } as any)
    .lazy(() =>
      import('./routes/__dashboard/databases/$database/index.lazy').then(
        (d) => d.Route,
      ),
    )

const dashboardDatabasesDatabaseEditIndexRoute =
  dashboardDatabasesDatabaseEditIndexImport
    .update({
      id: '/databases/$database/edit/',
      path: '/databases/$database/edit/',
      getParentRoute: () => dashboardRouteLazyRoute,
    } as any)
    .lazy(() =>
      import('./routes/__dashboard/databases/$database/edit/index.lazy').then(
        (d) => d.Route,
      ),
    )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/__dashboard': {
      id: '/__dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof dashboardRouteLazyImport
      parentRoute: typeof rootRoute
    }
    '/__public/': {
      id: '/__public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof publicIndexImport
      parentRoute: typeof rootRoute
    }
    '/__dashboard/databases/': {
      id: '/__dashboard/databases/'
      path: '/databases'
      fullPath: '/databases'
      preLoaderRoute: typeof dashboardDatabasesIndexImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/volumes/': {
      id: '/__dashboard/volumes/'
      path: '/volumes'
      fullPath: '/volumes'
      preLoaderRoute: typeof dashboardVolumesIndexImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/settings/': {
      id: '/__dashboard/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof dashboardSettingsIndexLazyImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/databases/$database/': {
      id: '/__dashboard/databases/$database/'
      path: '/databases/$database'
      fullPath: '/databases/$database'
      preLoaderRoute: typeof dashboardDatabasesDatabaseIndexImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/databases/new/': {
      id: '/__dashboard/databases/new/'
      path: '/databases/new'
      fullPath: '/databases/new'
      preLoaderRoute: typeof dashboardDatabasesNewIndexImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/volumes/$volume/': {
      id: '/__dashboard/volumes/$volume/'
      path: '/volumes/$volume'
      fullPath: '/volumes/$volume'
      preLoaderRoute: typeof dashboardVolumesVolumeIndexLazyImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/volumes/new/': {
      id: '/__dashboard/volumes/new/'
      path: '/volumes/new'
      fullPath: '/volumes/new'
      preLoaderRoute: typeof dashboardVolumesNewIndexLazyImport
      parentRoute: typeof dashboardRouteLazyImport
    }
    '/__dashboard/databases/$database/edit/': {
      id: '/__dashboard/databases/$database/edit/'
      path: '/databases/$database/edit'
      fullPath: '/databases/$database/edit'
      preLoaderRoute: typeof dashboardDatabasesDatabaseEditIndexImport
      parentRoute: typeof dashboardRouteLazyImport
    }
  }
}

// Create and export the route tree

interface dashboardRouteLazyRouteChildren {
  dashboardDatabasesIndexRoute: typeof dashboardDatabasesIndexRoute
  dashboardVolumesIndexRoute: typeof dashboardVolumesIndexRoute
  dashboardSettingsIndexLazyRoute: typeof dashboardSettingsIndexLazyRoute
  dashboardDatabasesDatabaseIndexRoute: typeof dashboardDatabasesDatabaseIndexRoute
  dashboardDatabasesNewIndexRoute: typeof dashboardDatabasesNewIndexRoute
  dashboardVolumesVolumeIndexLazyRoute: typeof dashboardVolumesVolumeIndexLazyRoute
  dashboardVolumesNewIndexLazyRoute: typeof dashboardVolumesNewIndexLazyRoute
  dashboardDatabasesDatabaseEditIndexRoute: typeof dashboardDatabasesDatabaseEditIndexRoute
}

const dashboardRouteLazyRouteChildren: dashboardRouteLazyRouteChildren = {
  dashboardDatabasesIndexRoute: dashboardDatabasesIndexRoute,
  dashboardVolumesIndexRoute: dashboardVolumesIndexRoute,
  dashboardSettingsIndexLazyRoute: dashboardSettingsIndexLazyRoute,
  dashboardDatabasesDatabaseIndexRoute: dashboardDatabasesDatabaseIndexRoute,
  dashboardDatabasesNewIndexRoute: dashboardDatabasesNewIndexRoute,
  dashboardVolumesVolumeIndexLazyRoute: dashboardVolumesVolumeIndexLazyRoute,
  dashboardVolumesNewIndexLazyRoute: dashboardVolumesNewIndexLazyRoute,
  dashboardDatabasesDatabaseEditIndexRoute:
    dashboardDatabasesDatabaseEditIndexRoute,
}

const dashboardRouteLazyRouteWithChildren =
  dashboardRouteLazyRoute._addFileChildren(dashboardRouteLazyRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof dashboardRouteLazyRouteWithChildren
  '/': typeof publicIndexRoute
  '/databases': typeof dashboardDatabasesIndexRoute
  '/volumes': typeof dashboardVolumesIndexRoute
  '/settings': typeof dashboardSettingsIndexLazyRoute
  '/databases/$database': typeof dashboardDatabasesDatabaseIndexRoute
  '/databases/new': typeof dashboardDatabasesNewIndexRoute
  '/volumes/$volume': typeof dashboardVolumesVolumeIndexLazyRoute
  '/volumes/new': typeof dashboardVolumesNewIndexLazyRoute
  '/databases/$database/edit': typeof dashboardDatabasesDatabaseEditIndexRoute
}

export interface FileRoutesByTo {
  '': typeof dashboardRouteLazyRouteWithChildren
  '/': typeof publicIndexRoute
  '/databases': typeof dashboardDatabasesIndexRoute
  '/volumes': typeof dashboardVolumesIndexRoute
  '/settings': typeof dashboardSettingsIndexLazyRoute
  '/databases/$database': typeof dashboardDatabasesDatabaseIndexRoute
  '/databases/new': typeof dashboardDatabasesNewIndexRoute
  '/volumes/$volume': typeof dashboardVolumesVolumeIndexLazyRoute
  '/volumes/new': typeof dashboardVolumesNewIndexLazyRoute
  '/databases/$database/edit': typeof dashboardDatabasesDatabaseEditIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/__dashboard': typeof dashboardRouteLazyRouteWithChildren
  '/__public/': typeof publicIndexRoute
  '/__dashboard/databases/': typeof dashboardDatabasesIndexRoute
  '/__dashboard/volumes/': typeof dashboardVolumesIndexRoute
  '/__dashboard/settings/': typeof dashboardSettingsIndexLazyRoute
  '/__dashboard/databases/$database/': typeof dashboardDatabasesDatabaseIndexRoute
  '/__dashboard/databases/new/': typeof dashboardDatabasesNewIndexRoute
  '/__dashboard/volumes/$volume/': typeof dashboardVolumesVolumeIndexLazyRoute
  '/__dashboard/volumes/new/': typeof dashboardVolumesNewIndexLazyRoute
  '/__dashboard/databases/$database/edit/': typeof dashboardDatabasesDatabaseEditIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/databases'
    | '/volumes'
    | '/settings'
    | '/databases/$database'
    | '/databases/new'
    | '/volumes/$volume'
    | '/volumes/new'
    | '/databases/$database/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/'
    | '/databases'
    | '/volumes'
    | '/settings'
    | '/databases/$database'
    | '/databases/new'
    | '/volumes/$volume'
    | '/volumes/new'
    | '/databases/$database/edit'
  id:
    | '__root__'
    | '/__dashboard'
    | '/__public/'
    | '/__dashboard/databases/'
    | '/__dashboard/volumes/'
    | '/__dashboard/settings/'
    | '/__dashboard/databases/$database/'
    | '/__dashboard/databases/new/'
    | '/__dashboard/volumes/$volume/'
    | '/__dashboard/volumes/new/'
    | '/__dashboard/databases/$database/edit/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  dashboardRouteLazyRoute: typeof dashboardRouteLazyRouteWithChildren
  publicIndexRoute: typeof publicIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  dashboardRouteLazyRoute: dashboardRouteLazyRouteWithChildren,
  publicIndexRoute: publicIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/__dashboard",
        "/__public/"
      ]
    },
    "/__dashboard": {
      "filePath": "__dashboard/route.lazy.tsx",
      "children": [
        "/__dashboard/databases/",
        "/__dashboard/volumes/",
        "/__dashboard/settings/",
        "/__dashboard/databases/$database/",
        "/__dashboard/databases/new/",
        "/__dashboard/volumes/$volume/",
        "/__dashboard/volumes/new/",
        "/__dashboard/databases/$database/edit/"
      ]
    },
    "/__public/": {
      "filePath": "__public/index.tsx"
    },
    "/__dashboard/databases/": {
      "filePath": "__dashboard/databases/index.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/volumes/": {
      "filePath": "__dashboard/volumes/index.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/settings/": {
      "filePath": "__dashboard/settings/index.lazy.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/databases/$database/": {
      "filePath": "__dashboard/databases/$database/index.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/databases/new/": {
      "filePath": "__dashboard/databases/new/index.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/volumes/$volume/": {
      "filePath": "__dashboard/volumes/$volume/index.lazy.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/volumes/new/": {
      "filePath": "__dashboard/volumes/new/index.lazy.tsx",
      "parent": "/__dashboard"
    },
    "/__dashboard/databases/$database/edit/": {
      "filePath": "__dashboard/databases/$database/edit/index.tsx",
      "parent": "/__dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
